/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cert.manager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cert.manager.models.V1ClusterIssuerSpecVenafiCloud;
import io.cert.manager.models.V1ClusterIssuerSpecVenafiTpp;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:00:20.132973Z[Etc/UTC]")
public class V1ClusterIssuerSpecVenafi {
  public static final String SERIALIZED_NAME_CLOUD = "cloud";
  @SerializedName(SERIALIZED_NAME_CLOUD)
  private V1ClusterIssuerSpecVenafiCloud cloud;

  public static final String SERIALIZED_NAME_TPP = "tpp";
  @SerializedName(SERIALIZED_NAME_TPP)
  private V1ClusterIssuerSpecVenafiTpp tpp;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public V1ClusterIssuerSpecVenafi() {
  }

  public V1ClusterIssuerSpecVenafi cloud(V1ClusterIssuerSpecVenafiCloud cloud) {
    
    this.cloud = cloud;
    return this;
  }

   /**
   * Get cloud
   * @return cloud
  **/
  @jakarta.annotation.Nullable
  public V1ClusterIssuerSpecVenafiCloud getCloud() {
    return cloud;
  }


  public void setCloud(V1ClusterIssuerSpecVenafiCloud cloud) {
    this.cloud = cloud;
  }


  public V1ClusterIssuerSpecVenafi tpp(V1ClusterIssuerSpecVenafiTpp tpp) {
    
    this.tpp = tpp;
    return this;
  }

   /**
   * Get tpp
   * @return tpp
  **/
  @jakarta.annotation.Nullable
  public V1ClusterIssuerSpecVenafiTpp getTpp() {
    return tpp;
  }


  public void setTpp(V1ClusterIssuerSpecVenafiTpp tpp) {
    this.tpp = tpp;
  }


  public V1ClusterIssuerSpecVenafi zone(String zone) {
    
    this.zone = zone;
    return this;
  }

   /**
   * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
   * @return zone
  **/
  @jakarta.annotation.Nonnull
  public String getZone() {
    return zone;
  }


  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterIssuerSpecVenafi v1ClusterIssuerSpecVenafi = (V1ClusterIssuerSpecVenafi) o;
    return Objects.equals(this.cloud, v1ClusterIssuerSpecVenafi.cloud) &&
        Objects.equals(this.tpp, v1ClusterIssuerSpecVenafi.tpp) &&
        Objects.equals(this.zone, v1ClusterIssuerSpecVenafi.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloud, tpp, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterIssuerSpecVenafi {\n");
    sb.append("    cloud: ").append(toIndentedString(cloud)).append("\n");
    sb.append("    tpp: ").append(toIndentedString(tpp)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloud");
    openapiFields.add("tpp");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("zone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1ClusterIssuerSpecVenafi
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1ClusterIssuerSpecVenafi.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ClusterIssuerSpecVenafi is not found in the empty JSON string", V1ClusterIssuerSpecVenafi.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1ClusterIssuerSpecVenafi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ClusterIssuerSpecVenafi` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1ClusterIssuerSpecVenafi.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `cloud`
      if (jsonObj.get("cloud") != null && !jsonObj.get("cloud").isJsonNull()) {
        V1ClusterIssuerSpecVenafiCloud.validateJsonObject(jsonObj.getAsJsonObject("cloud"));
      }
      // validate the optional field `tpp`
      if (jsonObj.get("tpp") != null && !jsonObj.get("tpp").isJsonNull()) {
        V1ClusterIssuerSpecVenafiTpp.validateJsonObject(jsonObj.getAsJsonObject("tpp"));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ClusterIssuerSpecVenafi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ClusterIssuerSpecVenafi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ClusterIssuerSpecVenafi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ClusterIssuerSpecVenafi.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ClusterIssuerSpecVenafi>() {
           @Override
           public void write(JsonWriter out, V1ClusterIssuerSpecVenafi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ClusterIssuerSpecVenafi read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1ClusterIssuerSpecVenafi given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1ClusterIssuerSpecVenafi
  * @throws IOException if the JSON string is invalid with respect to V1ClusterIssuerSpecVenafi
  */
  public static V1ClusterIssuerSpecVenafi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ClusterIssuerSpecVenafi.class);
  }

 /**
  * Convert an instance of V1ClusterIssuerSpecVenafi to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

