/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cert.manager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cert.manager.models.V1ClusterIssuerSpecAcmeExternalAccountBinding;
import io.cert.manager.models.V1ClusterIssuerSpecAcmePrivateKeySecretRef;
import io.cert.manager.models.V1ClusterIssuerSpecAcmeSolversInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:00:20.132973Z[Etc/UTC]")
public class V1ClusterIssuerSpecAcme {
  public static final String SERIALIZED_NAME_CA_BUNDLE = "caBundle";
  @SerializedName(SERIALIZED_NAME_CA_BUNDLE)
  private byte[] caBundle;

  public static final String SERIALIZED_NAME_DISABLE_ACCOUNT_KEY_GENERATION = "disableAccountKeyGeneration";
  @SerializedName(SERIALIZED_NAME_DISABLE_ACCOUNT_KEY_GENERATION)
  private Boolean disableAccountKeyGeneration;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ENABLE_DURATION_FEATURE = "enableDurationFeature";
  @SerializedName(SERIALIZED_NAME_ENABLE_DURATION_FEATURE)
  private Boolean enableDurationFeature;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_BINDING = "externalAccountBinding";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_BINDING)
  private V1ClusterIssuerSpecAcmeExternalAccountBinding externalAccountBinding;

  public static final String SERIALIZED_NAME_PREFERRED_CHAIN = "preferredChain";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CHAIN)
  private String preferredChain;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_SECRET_REF = "privateKeySecretRef";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_SECRET_REF)
  private V1ClusterIssuerSpecAcmePrivateKeySecretRef privateKeySecretRef;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_SKIP_T_L_S_VERIFY = "skipTLSVerify";
  @SerializedName(SERIALIZED_NAME_SKIP_T_L_S_VERIFY)
  private Boolean skipTLSVerify;

  public static final String SERIALIZED_NAME_SOLVERS = "solvers";
  @SerializedName(SERIALIZED_NAME_SOLVERS)
  private List<V1ClusterIssuerSpecAcmeSolversInner> solvers;

  public V1ClusterIssuerSpecAcme() {
  }

  public V1ClusterIssuerSpecAcme caBundle(byte[] caBundle) {
    
    this.caBundle = caBundle;
    return this;
  }

   /**
   * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
   * @return caBundle
  **/
  @jakarta.annotation.Nullable
  public byte[] getCaBundle() {
    return caBundle;
  }


  public void setCaBundle(byte[] caBundle) {
    this.caBundle = caBundle;
  }


  public V1ClusterIssuerSpecAcme disableAccountKeyGeneration(Boolean disableAccountKeyGeneration) {
    
    this.disableAccountKeyGeneration = disableAccountKeyGeneration;
    return this;
  }

   /**
   * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
   * @return disableAccountKeyGeneration
  **/
  @jakarta.annotation.Nullable
  public Boolean getDisableAccountKeyGeneration() {
    return disableAccountKeyGeneration;
  }


  public void setDisableAccountKeyGeneration(Boolean disableAccountKeyGeneration) {
    this.disableAccountKeyGeneration = disableAccountKeyGeneration;
  }


  public V1ClusterIssuerSpecAcme email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
   * @return email
  **/
  @jakarta.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public V1ClusterIssuerSpecAcme enableDurationFeature(Boolean enableDurationFeature) {
    
    this.enableDurationFeature = enableDurationFeature;
    return this;
  }

   /**
   * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let&#39;s Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
   * @return enableDurationFeature
  **/
  @jakarta.annotation.Nullable
  public Boolean getEnableDurationFeature() {
    return enableDurationFeature;
  }


  public void setEnableDurationFeature(Boolean enableDurationFeature) {
    this.enableDurationFeature = enableDurationFeature;
  }


  public V1ClusterIssuerSpecAcme externalAccountBinding(V1ClusterIssuerSpecAcmeExternalAccountBinding externalAccountBinding) {
    
    this.externalAccountBinding = externalAccountBinding;
    return this;
  }

   /**
   * Get externalAccountBinding
   * @return externalAccountBinding
  **/
  @jakarta.annotation.Nullable
  public V1ClusterIssuerSpecAcmeExternalAccountBinding getExternalAccountBinding() {
    return externalAccountBinding;
  }


  public void setExternalAccountBinding(V1ClusterIssuerSpecAcmeExternalAccountBinding externalAccountBinding) {
    this.externalAccountBinding = externalAccountBinding;
  }


  public V1ClusterIssuerSpecAcme preferredChain(String preferredChain) {
    
    this.preferredChain = preferredChain;
    return this;
  }

   /**
   * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let&#39;s Encrypt&#39;s DST crosssign you would use: \&quot;DST Root CA X3\&quot; or \&quot;ISRG Root X1\&quot; for the newer Let&#39;s Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer&#39;s CN
   * @return preferredChain
  **/
  @jakarta.annotation.Nullable
  public String getPreferredChain() {
    return preferredChain;
  }


  public void setPreferredChain(String preferredChain) {
    this.preferredChain = preferredChain;
  }


  public V1ClusterIssuerSpecAcme privateKeySecretRef(V1ClusterIssuerSpecAcmePrivateKeySecretRef privateKeySecretRef) {
    
    this.privateKeySecretRef = privateKeySecretRef;
    return this;
  }

   /**
   * Get privateKeySecretRef
   * @return privateKeySecretRef
  **/
  @jakarta.annotation.Nonnull
  public V1ClusterIssuerSpecAcmePrivateKeySecretRef getPrivateKeySecretRef() {
    return privateKeySecretRef;
  }


  public void setPrivateKeySecretRef(V1ClusterIssuerSpecAcmePrivateKeySecretRef privateKeySecretRef) {
    this.privateKeySecretRef = privateKeySecretRef;
  }


  public V1ClusterIssuerSpecAcme server(String server) {
    
    this.server = server;
    return this;
  }

   /**
   * Server is the URL used to access the ACME server&#39;s &#39;directory&#39; endpoint. For example, for Let&#39;s Encrypt&#39;s staging endpoint, you would use: \&quot;https://acme-staging-v02.api.letsencrypt.org/directory\&quot;. Only ACME v2 endpoints (i.e. RFC 8555) are supported.
   * @return server
  **/
  @jakarta.annotation.Nonnull
  public String getServer() {
    return server;
  }


  public void setServer(String server) {
    this.server = server;
  }


  public V1ClusterIssuerSpecAcme skipTLSVerify(Boolean skipTLSVerify) {
    
    this.skipTLSVerify = skipTLSVerify;
    return this;
  }

   /**
   * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
   * @return skipTLSVerify
  **/
  @jakarta.annotation.Nullable
  public Boolean getSkipTLSVerify() {
    return skipTLSVerify;
  }


  public void setSkipTLSVerify(Boolean skipTLSVerify) {
    this.skipTLSVerify = skipTLSVerify;
  }


  public V1ClusterIssuerSpecAcme solvers(List<V1ClusterIssuerSpecAcmeSolversInner> solvers) {
    
    this.solvers = solvers;
    return this;
  }

  public V1ClusterIssuerSpecAcme addSolversItem(V1ClusterIssuerSpecAcmeSolversInner solversItem) {
    if (this.solvers == null) {
      this.solvers = new ArrayList<>();
    }
    this.solvers.add(solversItem);
    return this;
  }

   /**
   * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
   * @return solvers
  **/
  @jakarta.annotation.Nullable
  public List<V1ClusterIssuerSpecAcmeSolversInner> getSolvers() {
    return solvers;
  }


  public void setSolvers(List<V1ClusterIssuerSpecAcmeSolversInner> solvers) {
    this.solvers = solvers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ClusterIssuerSpecAcme v1ClusterIssuerSpecAcme = (V1ClusterIssuerSpecAcme) o;
    return Arrays.equals(this.caBundle, v1ClusterIssuerSpecAcme.caBundle) &&
        Objects.equals(this.disableAccountKeyGeneration, v1ClusterIssuerSpecAcme.disableAccountKeyGeneration) &&
        Objects.equals(this.email, v1ClusterIssuerSpecAcme.email) &&
        Objects.equals(this.enableDurationFeature, v1ClusterIssuerSpecAcme.enableDurationFeature) &&
        Objects.equals(this.externalAccountBinding, v1ClusterIssuerSpecAcme.externalAccountBinding) &&
        Objects.equals(this.preferredChain, v1ClusterIssuerSpecAcme.preferredChain) &&
        Objects.equals(this.privateKeySecretRef, v1ClusterIssuerSpecAcme.privateKeySecretRef) &&
        Objects.equals(this.server, v1ClusterIssuerSpecAcme.server) &&
        Objects.equals(this.skipTLSVerify, v1ClusterIssuerSpecAcme.skipTLSVerify) &&
        Objects.equals(this.solvers, v1ClusterIssuerSpecAcme.solvers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(caBundle), disableAccountKeyGeneration, email, enableDurationFeature, externalAccountBinding, preferredChain, privateKeySecretRef, server, skipTLSVerify, solvers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ClusterIssuerSpecAcme {\n");
    sb.append("    caBundle: ").append(toIndentedString(caBundle)).append("\n");
    sb.append("    disableAccountKeyGeneration: ").append(toIndentedString(disableAccountKeyGeneration)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    enableDurationFeature: ").append(toIndentedString(enableDurationFeature)).append("\n");
    sb.append("    externalAccountBinding: ").append(toIndentedString(externalAccountBinding)).append("\n");
    sb.append("    preferredChain: ").append(toIndentedString(preferredChain)).append("\n");
    sb.append("    privateKeySecretRef: ").append(toIndentedString(privateKeySecretRef)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    skipTLSVerify: ").append(toIndentedString(skipTLSVerify)).append("\n");
    sb.append("    solvers: ").append(toIndentedString(solvers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caBundle");
    openapiFields.add("disableAccountKeyGeneration");
    openapiFields.add("email");
    openapiFields.add("enableDurationFeature");
    openapiFields.add("externalAccountBinding");
    openapiFields.add("preferredChain");
    openapiFields.add("privateKeySecretRef");
    openapiFields.add("server");
    openapiFields.add("skipTLSVerify");
    openapiFields.add("solvers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("privateKeySecretRef");
    openapiRequiredFields.add("server");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1ClusterIssuerSpecAcme
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1ClusterIssuerSpecAcme.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ClusterIssuerSpecAcme is not found in the empty JSON string", V1ClusterIssuerSpecAcme.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1ClusterIssuerSpecAcme.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ClusterIssuerSpecAcme` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1ClusterIssuerSpecAcme.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `externalAccountBinding`
      if (jsonObj.get("externalAccountBinding") != null && !jsonObj.get("externalAccountBinding").isJsonNull()) {
        V1ClusterIssuerSpecAcmeExternalAccountBinding.validateJsonObject(jsonObj.getAsJsonObject("externalAccountBinding"));
      }
      if ((jsonObj.get("preferredChain") != null && !jsonObj.get("preferredChain").isJsonNull()) && !jsonObj.get("preferredChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredChain").toString()));
      }
      // validate the required field `privateKeySecretRef`
      V1ClusterIssuerSpecAcmePrivateKeySecretRef.validateJsonObject(jsonObj.getAsJsonObject("privateKeySecretRef"));
      if (!jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if (jsonObj.get("solvers") != null && !jsonObj.get("solvers").isJsonNull()) {
        JsonArray jsonArraysolvers = jsonObj.getAsJsonArray("solvers");
        if (jsonArraysolvers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("solvers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `solvers` to be an array in the JSON string but got `%s`", jsonObj.get("solvers").toString()));
          }

          // validate the optional field `solvers` (array)
          for (int i = 0; i < jsonArraysolvers.size(); i++) {
            V1ClusterIssuerSpecAcmeSolversInner.validateJsonObject(jsonArraysolvers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ClusterIssuerSpecAcme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ClusterIssuerSpecAcme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ClusterIssuerSpecAcme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ClusterIssuerSpecAcme.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ClusterIssuerSpecAcme>() {
           @Override
           public void write(JsonWriter out, V1ClusterIssuerSpecAcme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ClusterIssuerSpecAcme read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1ClusterIssuerSpecAcme given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1ClusterIssuerSpecAcme
  * @throws IOException if the JSON string is invalid with respect to V1ClusterIssuerSpecAcme
  */
  public static V1ClusterIssuerSpecAcme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ClusterIssuerSpecAcme.class);
  }

 /**
  * Convert an instance of V1ClusterIssuerSpecAcme to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

