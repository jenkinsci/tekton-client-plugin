/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cert.manager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cert.manager.models.V1OrderSpecIssuerRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1OrderSpec
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:00:20.132973Z[Etc/UTC]")
public class V1OrderSpec {
  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_DNS_NAMES = "dnsNames";
  @SerializedName(SERIALIZED_NAME_DNS_NAMES)
  private List<String> dnsNames;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ipAddresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<String> ipAddresses;

  public static final String SERIALIZED_NAME_ISSUER_REF = "issuerRef";
  @SerializedName(SERIALIZED_NAME_ISSUER_REF)
  private V1OrderSpecIssuerRef issuerRef;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private byte[] request;

  public V1OrderSpec() {
  }

  public V1OrderSpec commonName(String commonName) {
    
    this.commonName = commonName;
    return this;
  }

   /**
   * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in &#x60;dnsNames&#x60; or &#x60;ipAddresses&#x60;. This field must match the corresponding field on the DER encoded CSR.
   * @return commonName
  **/
  @jakarta.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }


  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public V1OrderSpec dnsNames(List<String> dnsNames) {
    
    this.dnsNames = dnsNames;
    return this;
  }

  public V1OrderSpec addDnsNamesItem(String dnsNamesItem) {
    if (this.dnsNames == null) {
      this.dnsNames = new ArrayList<>();
    }
    this.dnsNames.add(dnsNamesItem);
    return this;
  }

   /**
   * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
   * @return dnsNames
  **/
  @jakarta.annotation.Nullable
  public List<String> getDnsNames() {
    return dnsNames;
  }


  public void setDnsNames(List<String> dnsNames) {
    this.dnsNames = dnsNames;
  }


  public V1OrderSpec duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
   * @return duration
  **/
  @jakarta.annotation.Nullable
  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public V1OrderSpec ipAddresses(List<String> ipAddresses) {
    
    this.ipAddresses = ipAddresses;
    return this;
  }

  public V1OrderSpec addIpAddressesItem(String ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
   * @return ipAddresses
  **/
  @jakarta.annotation.Nullable
  public List<String> getIpAddresses() {
    return ipAddresses;
  }


  public void setIpAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public V1OrderSpec issuerRef(V1OrderSpecIssuerRef issuerRef) {
    
    this.issuerRef = issuerRef;
    return this;
  }

   /**
   * Get issuerRef
   * @return issuerRef
  **/
  @jakarta.annotation.Nonnull
  public V1OrderSpecIssuerRef getIssuerRef() {
    return issuerRef;
  }


  public void setIssuerRef(V1OrderSpecIssuerRef issuerRef) {
    this.issuerRef = issuerRef;
  }


  public V1OrderSpec request(byte[] request) {
    
    this.request = request;
    return this;
  }

   /**
   * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
   * @return request
  **/
  @jakarta.annotation.Nonnull
  public byte[] getRequest() {
    return request;
  }


  public void setRequest(byte[] request) {
    this.request = request;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1OrderSpec v1OrderSpec = (V1OrderSpec) o;
    return Objects.equals(this.commonName, v1OrderSpec.commonName) &&
        Objects.equals(this.dnsNames, v1OrderSpec.dnsNames) &&
        Objects.equals(this.duration, v1OrderSpec.duration) &&
        Objects.equals(this.ipAddresses, v1OrderSpec.ipAddresses) &&
        Objects.equals(this.issuerRef, v1OrderSpec.issuerRef) &&
        Arrays.equals(this.request, v1OrderSpec.request);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, dnsNames, duration, ipAddresses, issuerRef, Arrays.hashCode(request));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1OrderSpec {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    dnsNames: ").append(toIndentedString(dnsNames)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    issuerRef: ").append(toIndentedString(issuerRef)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonName");
    openapiFields.add("dnsNames");
    openapiFields.add("duration");
    openapiFields.add("ipAddresses");
    openapiFields.add("issuerRef");
    openapiFields.add("request");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("issuerRef");
    openapiRequiredFields.add("request");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1OrderSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1OrderSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1OrderSpec is not found in the empty JSON string", V1OrderSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1OrderSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1OrderSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1OrderSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("commonName") != null && !jsonObj.get("commonName").isJsonNull()) && !jsonObj.get("commonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsNames") != null && !jsonObj.get("dnsNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsNames` to be an array in the JSON string but got `%s`", jsonObj.get("dnsNames").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipAddresses") != null && !jsonObj.get("ipAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipAddresses").toString()));
      }
      // validate the required field `issuerRef`
      V1OrderSpecIssuerRef.validateJsonObject(jsonObj.getAsJsonObject("issuerRef"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1OrderSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1OrderSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1OrderSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1OrderSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1OrderSpec>() {
           @Override
           public void write(JsonWriter out, V1OrderSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1OrderSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1OrderSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1OrderSpec
  * @throws IOException if the JSON string is invalid with respect to V1OrderSpec
  */
  public static V1OrderSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1OrderSpec.class);
  }

 /**
  * Convert an instance of V1OrderSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

