/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cert.manager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cert.manager.models.V1ChallengeSpecIssuerRef;
import io.cert.manager.models.V1ChallengeSpecSolver;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * V1ChallengeSpec
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:00:20.132973Z[Etc/UTC]")
public class V1ChallengeSpec {
  public static final String SERIALIZED_NAME_AUTHORIZATION_U_R_L = "authorizationURL";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_U_R_L)
  private String authorizationURL;

  public static final String SERIALIZED_NAME_DNS_NAME = "dnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_ISSUER_REF = "issuerRef";
  @SerializedName(SERIALIZED_NAME_ISSUER_REF)
  private V1ChallengeSpecIssuerRef issuerRef;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_SOLVER = "solver";
  @SerializedName(SERIALIZED_NAME_SOLVER)
  private V1ChallengeSpecSolver solver;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  /**
   * The type of ACME challenge this resource represents. One of \&quot;HTTP-01\&quot; or \&quot;DNS-01\&quot;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HTTP_01("HTTP-01"),
    
    DNS_01("DNS-01");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WILDCARD = "wildcard";
  @SerializedName(SERIALIZED_NAME_WILDCARD)
  private Boolean wildcard;

  public V1ChallengeSpec() {
  }

  public V1ChallengeSpec authorizationURL(String authorizationURL) {
    
    this.authorizationURL = authorizationURL;
    return this;
  }

   /**
   * The URL to the ACME Authorization resource that this challenge is a part of.
   * @return authorizationURL
  **/
  @jakarta.annotation.Nonnull
  public String getAuthorizationURL() {
    return authorizationURL;
  }


  public void setAuthorizationURL(String authorizationURL) {
    this.authorizationURL = authorizationURL;
  }


  public V1ChallengeSpec dnsName(String dnsName) {
    
    this.dnsName = dnsName;
    return this;
  }

   /**
   * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a &#39;wildcard&#39;, this field MUST be set to the non-wildcard domain, e.g. for &#x60;*.example.com&#x60;, it must be &#x60;example.com&#x60;.
   * @return dnsName
  **/
  @jakarta.annotation.Nonnull
  public String getDnsName() {
    return dnsName;
  }


  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public V1ChallengeSpec issuerRef(V1ChallengeSpecIssuerRef issuerRef) {
    
    this.issuerRef = issuerRef;
    return this;
  }

   /**
   * Get issuerRef
   * @return issuerRef
  **/
  @jakarta.annotation.Nonnull
  public V1ChallengeSpecIssuerRef getIssuerRef() {
    return issuerRef;
  }


  public void setIssuerRef(V1ChallengeSpecIssuerRef issuerRef) {
    this.issuerRef = issuerRef;
  }


  public V1ChallengeSpec key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: &#x60;&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;&#x60;. For DNS01 challenges, this is the base64 encoded SHA256 sum of the &#x60;&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;&#x60; text that must be set as the TXT record content.
   * @return key
  **/
  @jakarta.annotation.Nonnull
  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public V1ChallengeSpec solver(V1ChallengeSpecSolver solver) {
    
    this.solver = solver;
    return this;
  }

   /**
   * Get solver
   * @return solver
  **/
  @jakarta.annotation.Nonnull
  public V1ChallengeSpecSolver getSolver() {
    return solver;
  }


  public void setSolver(V1ChallengeSpecSolver solver) {
    this.solver = solver;
  }


  public V1ChallengeSpec token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
   * @return token
  **/
  @jakarta.annotation.Nonnull
  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public V1ChallengeSpec type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of ACME challenge this resource represents. One of \&quot;HTTP-01\&quot; or \&quot;DNS-01\&quot;.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public V1ChallengeSpec url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
   * @return url
  **/
  @jakarta.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public V1ChallengeSpec wildcard(Boolean wildcard) {
    
    this.wildcard = wildcard;
    return this;
  }

   /**
   * wildcard will be true if this challenge is for a wildcard identifier, for example &#39;*.example.com&#39;.
   * @return wildcard
  **/
  @jakarta.annotation.Nullable
  public Boolean getWildcard() {
    return wildcard;
  }


  public void setWildcard(Boolean wildcard) {
    this.wildcard = wildcard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ChallengeSpec v1ChallengeSpec = (V1ChallengeSpec) o;
    return Objects.equals(this.authorizationURL, v1ChallengeSpec.authorizationURL) &&
        Objects.equals(this.dnsName, v1ChallengeSpec.dnsName) &&
        Objects.equals(this.issuerRef, v1ChallengeSpec.issuerRef) &&
        Objects.equals(this.key, v1ChallengeSpec.key) &&
        Objects.equals(this.solver, v1ChallengeSpec.solver) &&
        Objects.equals(this.token, v1ChallengeSpec.token) &&
        Objects.equals(this.type, v1ChallengeSpec.type) &&
        Objects.equals(this.url, v1ChallengeSpec.url) &&
        Objects.equals(this.wildcard, v1ChallengeSpec.wildcard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationURL, dnsName, issuerRef, key, solver, token, type, url, wildcard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ChallengeSpec {\n");
    sb.append("    authorizationURL: ").append(toIndentedString(authorizationURL)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    issuerRef: ").append(toIndentedString(issuerRef)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    solver: ").append(toIndentedString(solver)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    wildcard: ").append(toIndentedString(wildcard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationURL");
    openapiFields.add("dnsName");
    openapiFields.add("issuerRef");
    openapiFields.add("key");
    openapiFields.add("solver");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("wildcard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizationURL");
    openapiRequiredFields.add("dnsName");
    openapiRequiredFields.add("issuerRef");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("solver");
    openapiRequiredFields.add("token");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1ChallengeSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1ChallengeSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ChallengeSpec is not found in the empty JSON string", V1ChallengeSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1ChallengeSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ChallengeSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1ChallengeSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authorizationURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationURL").toString()));
      }
      if (!jsonObj.get("dnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsName").toString()));
      }
      // validate the required field `issuerRef`
      V1ChallengeSpecIssuerRef.validateJsonObject(jsonObj.getAsJsonObject("issuerRef"));
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the required field `solver`
      V1ChallengeSpecSolver.validateJsonObject(jsonObj.getAsJsonObject("solver"));
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ChallengeSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ChallengeSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ChallengeSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ChallengeSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ChallengeSpec>() {
           @Override
           public void write(JsonWriter out, V1ChallengeSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ChallengeSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1ChallengeSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1ChallengeSpec
  * @throws IOException if the JSON string is invalid with respect to V1ChallengeSpec
  */
  public static V1ChallengeSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ChallengeSpec.class);
  }

 /**
  * Convert an instance of V1ChallengeSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

