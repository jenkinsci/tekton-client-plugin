/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cert.manager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cert.manager.models.V1ChallengeSpecSolverHttp01IngressIngressTemplate;
import io.cert.manager.models.V1ChallengeSpecSolverHttp01IngressPodTemplate;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for &#39;/.well-known/acme-challenge/XYZ&#39; to &#39;challenge solver&#39; pods that are provisioned by cert-manager for each Challenge to be completed.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:00:20.132973Z[Etc/UTC]")
public class V1ChallengeSpecSolverHttp01Ingress {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_INGRESS_CLASS_NAME = "ingressClassName";
  @SerializedName(SERIALIZED_NAME_INGRESS_CLASS_NAME)
  private String ingressClassName;

  public static final String SERIALIZED_NAME_INGRESS_TEMPLATE = "ingressTemplate";
  @SerializedName(SERIALIZED_NAME_INGRESS_TEMPLATE)
  private V1ChallengeSpecSolverHttp01IngressIngressTemplate ingressTemplate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POD_TEMPLATE = "podTemplate";
  @SerializedName(SERIALIZED_NAME_POD_TEMPLATE)
  private V1ChallengeSpecSolverHttp01IngressPodTemplate podTemplate;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public V1ChallengeSpecSolverHttp01Ingress() {
  }

  public V1ChallengeSpecSolverHttp01Ingress propertyClass(String propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * This field configures the annotation &#x60;kubernetes.io/ingress.class&#x60; when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of &#x60;class&#x60;, &#x60;name&#x60; or &#x60;ingressClassName&#x60; may be specified.
   * @return propertyClass
  **/
  @jakarta.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }


  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public V1ChallengeSpecSolverHttp01Ingress ingressClassName(String ingressClassName) {
    
    this.ingressClassName = ingressClassName;
    return this;
  }

   /**
   * This field configures the field &#x60;ingressClassName&#x60; on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of &#x60;class&#x60;, &#x60;name&#x60; or &#x60;ingressClassName&#x60; may be specified.
   * @return ingressClassName
  **/
  @jakarta.annotation.Nullable
  public String getIngressClassName() {
    return ingressClassName;
  }


  public void setIngressClassName(String ingressClassName) {
    this.ingressClassName = ingressClassName;
  }


  public V1ChallengeSpecSolverHttp01Ingress ingressTemplate(V1ChallengeSpecSolverHttp01IngressIngressTemplate ingressTemplate) {
    
    this.ingressTemplate = ingressTemplate;
    return this;
  }

   /**
   * Get ingressTemplate
   * @return ingressTemplate
  **/
  @jakarta.annotation.Nullable
  public V1ChallengeSpecSolverHttp01IngressIngressTemplate getIngressTemplate() {
    return ingressTemplate;
  }


  public void setIngressTemplate(V1ChallengeSpecSolverHttp01IngressIngressTemplate ingressTemplate) {
    this.ingressTemplate = ingressTemplate;
  }


  public V1ChallengeSpecSolverHttp01Ingress name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of &#x60;class&#x60;, &#x60;name&#x60; or &#x60;ingressClassName&#x60; may be specified.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1ChallengeSpecSolverHttp01Ingress podTemplate(V1ChallengeSpecSolverHttp01IngressPodTemplate podTemplate) {
    
    this.podTemplate = podTemplate;
    return this;
  }

   /**
   * Get podTemplate
   * @return podTemplate
  **/
  @jakarta.annotation.Nullable
  public V1ChallengeSpecSolverHttp01IngressPodTemplate getPodTemplate() {
    return podTemplate;
  }


  public void setPodTemplate(V1ChallengeSpecSolverHttp01IngressPodTemplate podTemplate) {
    this.podTemplate = podTemplate;
  }


  public V1ChallengeSpecSolverHttp01Ingress serviceType(String serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
   * @return serviceType
  **/
  @jakarta.annotation.Nullable
  public String getServiceType() {
    return serviceType;
  }


  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ChallengeSpecSolverHttp01Ingress v1ChallengeSpecSolverHttp01Ingress = (V1ChallengeSpecSolverHttp01Ingress) o;
    return Objects.equals(this.propertyClass, v1ChallengeSpecSolverHttp01Ingress.propertyClass) &&
        Objects.equals(this.ingressClassName, v1ChallengeSpecSolverHttp01Ingress.ingressClassName) &&
        Objects.equals(this.ingressTemplate, v1ChallengeSpecSolverHttp01Ingress.ingressTemplate) &&
        Objects.equals(this.name, v1ChallengeSpecSolverHttp01Ingress.name) &&
        Objects.equals(this.podTemplate, v1ChallengeSpecSolverHttp01Ingress.podTemplate) &&
        Objects.equals(this.serviceType, v1ChallengeSpecSolverHttp01Ingress.serviceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, ingressClassName, ingressTemplate, name, podTemplate, serviceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ChallengeSpecSolverHttp01Ingress {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    ingressClassName: ").append(toIndentedString(ingressClassName)).append("\n");
    sb.append("    ingressTemplate: ").append(toIndentedString(ingressTemplate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    podTemplate: ").append(toIndentedString(podTemplate)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class");
    openapiFields.add("ingressClassName");
    openapiFields.add("ingressTemplate");
    openapiFields.add("name");
    openapiFields.add("podTemplate");
    openapiFields.add("serviceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1ChallengeSpecSolverHttp01Ingress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1ChallengeSpecSolverHttp01Ingress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ChallengeSpecSolverHttp01Ingress is not found in the empty JSON string", V1ChallengeSpecSolverHttp01Ingress.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1ChallengeSpecSolverHttp01Ingress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ChallengeSpecSolverHttp01Ingress` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("ingressClassName") != null && !jsonObj.get("ingressClassName").isJsonNull()) && !jsonObj.get("ingressClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingressClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingressClassName").toString()));
      }
      // validate the optional field `ingressTemplate`
      if (jsonObj.get("ingressTemplate") != null && !jsonObj.get("ingressTemplate").isJsonNull()) {
        V1ChallengeSpecSolverHttp01IngressIngressTemplate.validateJsonObject(jsonObj.getAsJsonObject("ingressTemplate"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `podTemplate`
      if (jsonObj.get("podTemplate") != null && !jsonObj.get("podTemplate").isJsonNull()) {
        V1ChallengeSpecSolverHttp01IngressPodTemplate.validateJsonObject(jsonObj.getAsJsonObject("podTemplate"));
      }
      if ((jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) && !jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ChallengeSpecSolverHttp01Ingress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ChallengeSpecSolverHttp01Ingress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ChallengeSpecSolverHttp01Ingress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ChallengeSpecSolverHttp01Ingress.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ChallengeSpecSolverHttp01Ingress>() {
           @Override
           public void write(JsonWriter out, V1ChallengeSpecSolverHttp01Ingress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ChallengeSpecSolverHttp01Ingress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1ChallengeSpecSolverHttp01Ingress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1ChallengeSpecSolverHttp01Ingress
  * @throws IOException if the JSON string is invalid with respect to V1ChallengeSpecSolverHttp01Ingress
  */
  public static V1ChallengeSpecSolverHttp01Ingress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ChallengeSpecSolverHttp01Ingress.class);
  }

 /**
  * Convert an instance of V1ChallengeSpecSolverHttp01Ingress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

